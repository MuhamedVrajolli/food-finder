/*
 * This file is generated by jOOQ.
 */
package foodfinder.jooq.tables;


import foodfinder.jooq.Keys;
import foodfinder.jooq.Public;
import foodfinder.jooq.tables.records.PriceCategoriesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PriceCategories extends TableImpl<PriceCategoriesRecord> {

    private static final long serialVersionUID = -1763422432;

    /**
     * The reference instance of <code>public.price_categories</code>
     */
    public static final PriceCategories PRICE_CATEGORIES = new PriceCategories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PriceCategoriesRecord> getRecordType() {
        return PriceCategoriesRecord.class;
    }

    /**
     * The column <code>public.price_categories.id</code>.
     */
    public final TableField<PriceCategoriesRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('price_categories_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.price_categories.category</code>.
     */
    public final TableField<PriceCategoriesRecord, String> CATEGORY = createField(DSL.name("category"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.price_categories.created_date</code>.
     */
    public final TableField<PriceCategoriesRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.price_categories.is_active</code>.
     */
    public final TableField<PriceCategoriesRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.price_categories</code> table reference
     */
    public PriceCategories() {
        this(DSL.name("price_categories"), null);
    }

    /**
     * Create an aliased <code>public.price_categories</code> table reference
     */
    public PriceCategories(String alias) {
        this(DSL.name(alias), PRICE_CATEGORIES);
    }

    /**
     * Create an aliased <code>public.price_categories</code> table reference
     */
    public PriceCategories(Name alias) {
        this(alias, PRICE_CATEGORIES);
    }

    private PriceCategories(Name alias, Table<PriceCategoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private PriceCategories(Name alias, Table<PriceCategoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PriceCategories(Table<O> child, ForeignKey<O, PriceCategoriesRecord> key) {
        super(child, key, PRICE_CATEGORIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<PriceCategoriesRecord, Long> getIdentity() {
        return Keys.IDENTITY_PRICE_CATEGORIES;
    }

    @Override
    public UniqueKey<PriceCategoriesRecord> getPrimaryKey() {
        return Keys.PRICE_CATEGORIES_PKEY;
    }

    @Override
    public List<UniqueKey<PriceCategoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<PriceCategoriesRecord>>asList(Keys.PRICE_CATEGORIES_PKEY);
    }

    @Override
    public PriceCategories as(String alias) {
        return new PriceCategories(DSL.name(alias), this);
    }

    @Override
    public PriceCategories as(Name alias) {
        return new PriceCategories(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PriceCategories rename(String name) {
        return new PriceCategories(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PriceCategories rename(Name name) {
        return new PriceCategories(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, LocalDateTime, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
