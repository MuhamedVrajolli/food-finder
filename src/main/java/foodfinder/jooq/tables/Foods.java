/*
 * This file is generated by jOOQ.
 */
package foodfinder.jooq.tables;


import foodfinder.jooq.Keys;
import foodfinder.jooq.Public;
import foodfinder.jooq.tables.records.FoodsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Foods extends TableImpl<FoodsRecord> {

    private static final long serialVersionUID = -850301209;

    /**
     * The reference instance of <code>public.foods</code>
     */
    public static final Foods FOODS = new Foods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FoodsRecord> getRecordType() {
        return FoodsRecord.class;
    }

    /**
     * The column <code>public.foods.id</code>.
     */
    public final TableField<FoodsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('foods_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.foods.name</code>.
     */
    public final TableField<FoodsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.foods.preparation_time</code>.
     */
    public final TableField<FoodsRecord, Integer> PREPARATION_TIME = createField(DSL.name("preparation_time"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.foods.price_category</code>.
     */
    public final TableField<FoodsRecord, Long> PRICE_CATEGORY = createField(DSL.name("price_category"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.foods.is_dessert</code>.
     */
    public final TableField<FoodsRecord, Boolean> IS_DESSERT = createField(DSL.name("is_dessert"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.foods.created_date</code>.
     */
    public final TableField<FoodsRecord, LocalDateTime> CREATED_DATE = createField(DSL.name("created_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.foods.is_active</code>.
     */
    public final TableField<FoodsRecord, Boolean> IS_ACTIVE = createField(DSL.name("is_active"), org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.foods</code> table reference
     */
    public Foods() {
        this(DSL.name("foods"), null);
    }

    /**
     * Create an aliased <code>public.foods</code> table reference
     */
    public Foods(String alias) {
        this(DSL.name(alias), FOODS);
    }

    /**
     * Create an aliased <code>public.foods</code> table reference
     */
    public Foods(Name alias) {
        this(alias, FOODS);
    }

    private Foods(Name alias, Table<FoodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Foods(Name alias, Table<FoodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Foods(Table<O> child, ForeignKey<O, FoodsRecord> key) {
        super(child, key, FOODS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<FoodsRecord, Long> getIdentity() {
        return Keys.IDENTITY_FOODS;
    }

    @Override
    public UniqueKey<FoodsRecord> getPrimaryKey() {
        return Keys.FOODS_PKEY;
    }

    @Override
    public List<UniqueKey<FoodsRecord>> getKeys() {
        return Arrays.<UniqueKey<FoodsRecord>>asList(Keys.FOODS_PKEY);
    }

    @Override
    public List<ForeignKey<FoodsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FoodsRecord, ?>>asList(Keys.FOODS__FOODS_PRICE_CATEGORY_FKEY);
    }

    public PriceCategories priceCategories() {
        return new PriceCategories(this, Keys.FOODS__FOODS_PRICE_CATEGORY_FKEY);
    }

    @Override
    public Foods as(String alias) {
        return new Foods(DSL.name(alias), this);
    }

    @Override
    public Foods as(Name alias) {
        return new Foods(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Foods rename(String name) {
        return new Foods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Foods rename(Name name) {
        return new Foods(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Integer, Long, Boolean, LocalDateTime, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
