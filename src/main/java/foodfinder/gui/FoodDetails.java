/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package foodfinder.gui;

import foodfinder.foodservice.FoodService;
import foodfinder.foodservice.FoodServiceImpl;
import foodfinder.models.FoodsModel;
import java.awt.event.KeyEvent;
import java.awt.Color;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import javax.swing.plaf.ColorUIResource;

/**
 *
 * @author medi
 */
public class FoodDetails extends javax.swing.JFrame {
    private FoodService foodService;
    private Long foodId;

    /**
     * Creates new form AddFood
     */
    public FoodDetails(Long foodId) {
        this.foodId = foodId;
        foodService = new FoodServiceImpl();
        
        UIManager.put("TextField.inactiveBackground", new ColorUIResource(Color.WHITE));

        initComponents();
        
        this.setIconImage(new ImageIcon(getClass().getResource("/icons/logo.jpg")).getImage());
        
        fillPriceCategories();
        setup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        preparationTimeLabel = new javax.swing.JLabel();
        priceCategoryComboBox = new javax.swing.JComboBox<>();
        priceCategoryLabel = new javax.swing.JLabel();
        typeCheckBox = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        preparationTimeTextField = new javax.swing.JTextField();
        errorMessageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        nameLabel.setText("Name");

        preparationTimeLabel.setText("Preparation Time (Minutes)");

        priceCategoryComboBox.setBackground(new Color(238, 238, 238));

        priceCategoryLabel.setText("Price Category");

        typeCheckBox.setText("Is Dessert");

        saveButton.setBackground(new Color(33, 150, 243));
        saveButton.setForeground(java.awt.Color.white);
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setBackground(new Color(33, 150, 243));
        cancelButton.setForeground(java.awt.Color.white);
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        preparationTimeTextField.setDisabledTextColor(new java.awt.Color(254, 254, 254));
        preparationTimeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                preparationTimeTextFieldKeyPressed(evt);
            }
        });

        errorMessageLabel.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        errorMessageLabel.setForeground(new java.awt.Color(232, 64, 64));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(priceCategoryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                                            .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(preparationTimeLabel)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(preparationTimeTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(typeCheckBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addComponent(priceCategoryLabel))
                                .addGap(0, 14, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(cancelButton)
                                .addGap(18, 18, 18)
                                .addComponent(saveButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(errorMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(preparationTimeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(preparationTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(priceCategoryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceCategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(errorMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String name = nameTextField.getText();
        Long priceCategory = foodService.getPriceCategoryByName(priceCategoryComboBox.getSelectedItem().toString()).getId();
        boolean isDessert = typeCheckBox.isSelected();
        
        if(name == null || name.trim().isEmpty()){
            errorMessageLabel.setText("Name cannot be empty");
            return;
        }
        if (preparationTimeTextField.getText() == null || preparationTimeTextField.getText().trim().isEmpty()){
            errorMessageLabel.setText("Preparation Time cannot be empty");
            return;
        }
        if (preparationTimeTextField.getText().length() > 3){
            errorMessageLabel.setText("Preparation Time cannot be bigger than 3 digits");
            return;
        }
        
        Integer preparationTime = Integer.parseInt(preparationTimeTextField.getText());
        
        FoodsModel foodsModel = new FoodsModel();
        foodsModel.setName(name);
        foodsModel.setPreparationTime(preparationTime);
        foodsModel.setPriceCategory(priceCategory);
        foodsModel.setIsDessert(isDessert);
        
        if (foodId != null){
            try {
                foodService.update(foodId, foodsModel);
            } catch (RuntimeException e) {
                errorMessageLabel.setText(e.getMessage());
                return;
            }
        } else {
            try{
                foodService.add(foodsModel);
            } catch (RuntimeException e) {
                errorMessageLabel.setText(e.getMessage());
                return;
            }
        }
        this.dispose();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void preparationTimeTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_preparationTimeTextFieldKeyPressed
        if(preparationTimeTextField.getText().length() >= 3 
                && (evt.getKeyCode() != KeyEvent.VK_DELETE && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE
                && evt.getKeyCode() != KeyEvent.VK_LEFT && evt.getKeyCode() != KeyEvent.VK_RIGHT)){
            preparationTimeTextField.setEditable(false);
        }else if ((evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') 
                || evt.getKeyCode() == KeyEvent.VK_DELETE || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE
                || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            preparationTimeTextField.setEditable(true);
        } else {
            preparationTimeTextField.setEditable(false);
        }
    }//GEN-LAST:event_preparationTimeTextFieldKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel preparationTimeLabel;
    private javax.swing.JTextField preparationTimeTextField;
    private javax.swing.JComboBox<String> priceCategoryComboBox;
    private javax.swing.JLabel priceCategoryLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox typeCheckBox;
    // End of variables declaration//GEN-END:variables

    private void fillPriceCategories() {
        String[] priceCategories = foodService.getAllPriceCategories()
                .stream().map((p) -> p.getCategory()).toArray(String[]::new);
                
        priceCategoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(priceCategories));
    }

    private void setup() {
        if (foodId != null){
            FoodsModel foodsModel = foodService.getById(foodId);
            nameTextField.setText(foodsModel.getName());
            preparationTimeTextField.setText(foodsModel.getPreparationTime().toString());
            priceCategoryComboBox.setSelectedItem(foodsModel.getPriceCategoryModel().getCategory());
            typeCheckBox.setSelected(foodsModel.getIsDessert());
        }
    }
}
