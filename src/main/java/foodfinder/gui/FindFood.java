/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package foodfinder.gui;

import foodfinder.foodservice.FoodService;
import foodfinder.foodservice.FoodServiceImpl;
import foodfinder.models.FilterModel;
import foodfinder.models.FoodsModel;
import foodfinder.models.PriceCategoryModel;
import foodfinder.pageable.Page;
import foodfinder.pageable.Pageable;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.ImageIcon;
import javax.swing.UIManager;
import javax.swing.plaf.ColorUIResource;

/**
 *
 * @author medi
 */
public class FindFood extends javax.swing.JFrame {
    private FoodService foodService;

    /**
     * Creates new form FindFood
     */
    public FindFood() {
        foodService = new FoodServiceImpl();
        
        UIManager.put("TextField.inactiveBackground", new ColorUIResource(Color.WHITE));
        
        initComponents();
        
        this.setIconImage(new ImageIcon(getClass().getResource("/icons/logo.jpg")).getImage());
        
        this.pack();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        
        fillPriceCategories();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        errorMessageLabel = new javax.swing.JLabel();
        findButton = new javax.swing.JButton();
        typeCheckBox = new javax.swing.JCheckBox();
        priceCategoryLabel = new javax.swing.JLabel();
        preparationTimeLabel2 = new javax.swing.JLabel();
        minTimeTextField = new javax.swing.JTextField();
        preparationTimeLabel3 = new javax.swing.JLabel();
        maxTimeTextField = new javax.swing.JTextField();
        preparationTimeLabel1 = new javax.swing.JLabel();
        randomButton = new javax.swing.JButton();
        cheapPriceCheckBox = new javax.swing.JCheckBox();
        normalPriceCheckBox = new javax.swing.JCheckBox();
        expensivePriceCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        errorMessageLabel.setFont(new java.awt.Font("Ubuntu", 1, 14)); // NOI18N
        errorMessageLabel.setForeground(new java.awt.Color(232, 64, 64));

        findButton.setBackground(new Color(33, 150, 243));
        findButton.setForeground(java.awt.Color.white);
        findButton.setText("Find Food");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        typeCheckBox.setText("Is Dessert");

        priceCategoryLabel.setText("Price Category:");

        preparationTimeLabel2.setText("And");

        minTimeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                minTimeTextFieldKeyPressed(evt);
            }
        });

        preparationTimeLabel3.setText("Minutes");

        maxTimeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                maxTimeTextFieldKeyPressed(evt);
            }
        });

        preparationTimeLabel1.setText("Preparation time between");

        randomButton.setBackground(new Color(33, 150, 243));
        randomButton.setForeground(java.awt.Color.white);
        randomButton.setText("Get A Random Food");
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(randomButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(findButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(errorMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(preparationTimeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(minTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(preparationTimeLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(maxTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(preparationTimeLabel3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cheapPriceCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(priceCategoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(normalPriceCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(expensivePriceCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 26, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(typeCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(preparationTimeLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(preparationTimeLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxTimeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(preparationTimeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(priceCategoryLabel)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cheapPriceCheckBox)
                    .addComponent(normalPriceCheckBox)
                    .addComponent(expensivePriceCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(typeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findButton)
                    .addComponent(randomButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        Integer minTime;
        Integer maxTime;
        
        if((minTimeTextField.getText() == null || minTimeTextField.getText().trim().isEmpty())
                && (maxTimeTextField.getText() == null || maxTimeTextField.getText().trim().isEmpty())){
            minTime = null;
            maxTime = null;
        }else{
            if (minTimeTextField.getText() == null || minTimeTextField.getText().trim().isEmpty()){
                errorMessageLabel.setText("Min Preparation Time cannot be empty");
                return;
            }
            if (maxTimeTextField.getText() == null || maxTimeTextField.getText().trim().isEmpty()){
                errorMessageLabel.setText("Max Preparation Time cannot be empty");
                return;
            }
            minTime = Integer.parseInt(minTimeTextField.getText());
            maxTime = Integer.parseInt(maxTimeTextField.getText());
            
            if (minTime >= maxTime){
                errorMessageLabel.setText("Invalid Preparation Time Range");
                return;
            }
        }
        if (minTimeTextField.getText().length() > 3){
            errorMessageLabel.setText("Preparation Time cannot be bigger than 3 digits");
            return;
        }
        if (maxTimeTextField.getText().length() > 3){
            errorMessageLabel.setText("Preparation Time cannot be bigger than 3 digits");
            return;
        }
        
        List<Long> priceCategories = new ArrayList<>();
        if(cheapPriceCheckBox.isSelected()){
            priceCategories.add(1L);
        }
        if(normalPriceCheckBox.isSelected()){
            priceCategories.add(2L);
        }
        if(expensivePriceCheckBox.isSelected()){
            priceCategories.add(3L);
        }
        boolean isDessert = typeCheckBox.isSelected();
        
        FilterModel filterModel = new FilterModel();
        filterModel.setMinTime(minTime);
        filterModel.setMaxTime(maxTime);
        filterModel.setPriceCategories(priceCategories);
        filterModel.setIsDessert(isDessert);
        
        Page<FoodsModel> page;
        page = foodService.filter(new Pageable(0, Integer.MAX_VALUE, null), filterModel, null);
        
        List<FoodsModel> foods = page.getContent();
        
        if(foods.isEmpty()){
            errorMessageLabel.setText("There is no food with the given filters");
            return;
        }
        
        Random random = new Random();
        FoodsModel randomElement = foods.get(random.nextInt(foods.size()));
        
        foodDetailsFrameCreator(randomElement.getId());
    }//GEN-LAST:event_findButtonActionPerformed

    private void minTimeTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minTimeTextFieldKeyPressed
        if(minTimeTextField.getText().length() >= 3 
                && (evt.getKeyCode() != KeyEvent.VK_DELETE && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE
                && evt.getKeyCode() != KeyEvent.VK_LEFT && evt.getKeyCode() != KeyEvent.VK_RIGHT)){
            minTimeTextField.setEditable(false);
        } else if ((evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') 
                || evt.getKeyCode() == KeyEvent.VK_DELETE || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE
                || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            minTimeTextField.setEditable(true);
        } else {
            minTimeTextField.setEditable(false);
        }
    }//GEN-LAST:event_minTimeTextFieldKeyPressed

    private void maxTimeTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxTimeTextFieldKeyPressed
        if(maxTimeTextField.getText().length() >= 3 
                && (evt.getKeyCode() != KeyEvent.VK_DELETE && evt.getKeyCode() != KeyEvent.VK_BACK_SPACE
                && evt.getKeyCode() != KeyEvent.VK_LEFT && evt.getKeyCode() != KeyEvent.VK_RIGHT)){
            maxTimeTextField.setEditable(false);
        }else if ((evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') 
                || evt.getKeyCode() == KeyEvent.VK_DELETE || evt.getKeyCode() == KeyEvent.VK_BACK_SPACE
                || evt.getKeyCode() == KeyEvent.VK_LEFT || evt.getKeyCode() == KeyEvent.VK_RIGHT) {
            maxTimeTextField.setEditable(true);
        } else {
            maxTimeTextField.setEditable(false);
        }
    }//GEN-LAST:event_maxTimeTextFieldKeyPressed

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
        Page<FoodsModel> page;
        page = foodService.filter(new Pageable(0, Integer.MAX_VALUE, null), null, null);
        
        List<FoodsModel> foods = page.getContent();
        
        Random random = new Random();
        FoodsModel randomElement = foods.get(random.nextInt(foods.size()));
        
        foodDetailsFrameCreator(randomElement.getId());
    }//GEN-LAST:event_randomButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FindFood.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FindFood.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FindFood.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FindFood.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FindFood().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cheapPriceCheckBox;
    private javax.swing.JLabel errorMessageLabel;
    private javax.swing.JCheckBox expensivePriceCheckBox;
    private javax.swing.JButton findButton;
    private javax.swing.JTextField maxTimeTextField;
    private javax.swing.JTextField minTimeTextField;
    private javax.swing.JCheckBox normalPriceCheckBox;
    private javax.swing.JLabel preparationTimeLabel1;
    private javax.swing.JLabel preparationTimeLabel2;
    private javax.swing.JLabel preparationTimeLabel3;
    private javax.swing.JLabel priceCategoryLabel;
    private javax.swing.JButton randomButton;
    private javax.swing.JCheckBox typeCheckBox;
    // End of variables declaration//GEN-END:variables


    private void fillPriceCategories() {
        List<PriceCategoryModel> priceCategories = foodService.getAllPriceCategories();
                
        cheapPriceCheckBox.setText(priceCategories.get(0).getCategory());
        normalPriceCheckBox.setText(priceCategories.get(1).getCategory());
        expensivePriceCheckBox.setText(priceCategories.get(2).getCategory());
    }
    
    private FoodDetails foodDetailsFrameCreator(Long foodId) {
        FoodDetails foodDetails = new FoodDetails(foodId);
        foodDetails.pack();
        foodDetails.setLocationRelativeTo(null);
        foodDetails.setVisible(true);
        
        return foodDetails;
    }
}
